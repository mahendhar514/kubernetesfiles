# Create Cluster
eksctl create cluster --name=eksdemo --region=ap-south-1 --zones=ap-south-1a,ap-south-1b --without-nodegroup

eksctl create cluster --name mahi --region ap-south-1 --node-type t2.xlarge --nodes-min 2 --nodes-max 2 --zones ap-south-1a,ap-south-1b --ssh-access --ssh-public-key=pemkey


# Create Public Node Group
eksctl create nodegroup --cluster=eksdemo --region=ap-south-1 --name=eksdemo1-ng-public1 --node-type=t3.medium  --nodes=2 --nodes-min=2 --nodes-max=4 --node-volume-size=20 --ssh-access --ssh-public-key=DevOpsChappie  --managed --asg-access --external-dns-access --full-ecr-access --appmesh-access --alb-ingress-access


aws eks update-kubeconfig --name eksdemo  --region ap-south-1


eksctl utils write-kubeconfig --cluster=eksdemo


# Metric Server deployment ##

The Kubernetes Metrics Server is an aggregator of resource usage data in your cluster, and it isn't deployed by default in Amazon EKS clusters.

we need to deploy by following process 

#Deploy the Metrics Server with the following command:

kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml


#Verify that the metrics-server deployment is running the desired number of Pods with the following command.
 
kubectl get deployment metrics-server -n kube-system

kubectl top pod # to see pod load

kubectl top node # to see node load 


ingress load balancer for path based routing for kubernetes

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.1/deploy/static/provider/cloud/deploy.yaml
